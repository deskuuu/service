<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="DELETE">
        <category>general</category>
        <client_script/>
        <description>Imagine the scenario the client wants to track the price of a configuration item (which let's say that changes every day). He wants a chart in order to have a good view.&#13;
• Create a field in the Configuration Item[cmdb_ci] table. "Price", type "currency"&#13;
• Create a field in the Configuration item[cmdb_ci] table. "Price track", type "String", max length of let's say 10 000 000 characters, it will be a hidden field anyway.&#13;
• Research for the JavaScript library "Chart.js". Look at ServiceNow BG Team chat files for the ServiceNow - Custom UI page Documentation By Rusev.&#13;
• Implement the Chart.js library so it displays how the price have changed from the date of creation of the Configuration Item[cmdb_ci] until today's date.</description>
        <direct>false</direct>
        <endpoint>x_847697_serviceno_TrackCIPrice.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css"></link>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/css/materialize.min.css"></link>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"></link>

    <g:evaluate>
        var rawData = [];

        var incident = new GlideRecord('incident');
        incident.orderBy('priority');
        incident.query();

        while(incident.next()){
            rawData.push({
                sys_created_on: incident.getDisplayValue('sys_created_on'),
                priority: incident.getDisplayValue('priority')
            });
        }

        var dataStr = JSON.stringify(rawData);
    </g:evaluate>
    
    <div class="container">
        <div class="row">
            <h1>Header</h1>
        </div>
     	<div class="row">
            <canvas id="sample-chart" width="400" height="200"></canvas>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/js/materialize.min.js"></script>    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.19.3/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"></script>

    <script>
        (function($){
            var ctx = document.getElementById("sample-chart").getContext('2d');

            var data = $[dataStr];

            var groupedData = _.groupBy(data, function(rec){
                return rec.sys_created_on.split(" ")[0];
            }); 

            var secondDimension = _.uniq(_.map(data, function(obj){
                return obj.priority;
            }));

            var datasets = _.map(secondDimension, function(dimension){
                var counts = _.map(groupedData, function(obj, key){ 
                    return _.filter(obj, function(subObj){
                        return subObj.priority == dimension;
                    }).length;
                });

                return {
                    data: counts,
                    backgroundColor: getRandomColor(),
                    label: dimension,
                    fill: false
                }

            });

            var labels = _.map(groupedData, function(obj, key){ return key});
            var data = _.map(groupedData, function(obj, key){ return obj.length});

            new Chart(ctx, {
                type: 'bar',
                'data': {
                    'labels': _.map(groupedData, function(obj, key){ return key}),
                    'datasets': datasets
                },
                options: {
                   scales: {
                        xAxes: [{
                            stacked: true,
                        }],
                        yAxes: [{
                            stacked: true
                        }]
                    }
                }
            }); 

            function getRandomColor() {
              var letters = '0123456789ABCDEF';
              var color = '#';
              for (var i = 0; i != 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
              }
              return color;
            }

        })(jQuery)

    </script>
	
</j:jelly>]]></html>
        <name>TrackCIPrice</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-31 07:35:29</sys_created_on>
        <sys_id>3b8cb3032fa59110b2ab3f96f699b6cf</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TrackCIPrice</sys_name>
        <sys_package display_value="ServiceNowTasks" source="x_847697_serviceno">b979020a2f9d1110b2ab3f96f699b655</sys_package>
        <sys_policy/>
        <sys_scope display_value="ServiceNowTasks">b979020a2f9d1110b2ab3f96f699b655</sys_scope>
        <sys_update_name>sys_ui_page_3b8cb3032fa59110b2ab3f96f699b6cf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-31 07:35:29</sys_updated_on>
    </sys_ui_page>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="ServiceNowTasks">b979020a2f9d1110b2ab3f96f699b655</application>
        <file_path/>
        <instance_id>ea74b21ddb9f0c943050ac44d49619a5</instance_id>
        <instance_name>dev101878</instance_name>
        <name>sys_ui_page_3b8cb3032fa59110b2ab3f96f699b6cf</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_page"&gt;&lt;sys_ui_page action="INSERT_OR_UPDATE"&gt;&lt;category&gt;general&lt;/category&gt;&lt;client_script/&gt;&lt;description&gt;Imagine the scenario the client wants to track the price of a configuration item (which let's say that changes every day). He wants a chart in order to have a good view.&amp;#13;
• Create a field in the Configuration Item[cmdb_ci] table. "Price", type "currency"&amp;#13;
• Create a field in the Configuration item[cmdb_ci] table. "Price track", type "String", max length of let's say 10 000 000 characters, it will be a hidden field anyway.&amp;#13;
• Research for the JavaScript library "Chart.js". Look at ServiceNow BG Team chat files for the ServiceNow - Custom UI page Documentation By Rusev.&amp;#13;
• Implement the Chart.js library so it displays how the price have changed from the date of creation of the Configuration Item[cmdb_ci] until today's date.&lt;/description&gt;&lt;direct&gt;false&lt;/direct&gt;&lt;endpoint&gt;x_847697_serviceno_TrackCIPrice.do&lt;/endpoint&gt;&lt;html&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;

	&lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css"&gt;&lt;/link&gt;
    &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/css/materialize.min.css"&gt;&lt;/link&gt;
    &lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"&gt;&lt;/link&gt;

    &lt;g:evaluate&gt;
        var rawData = [];

        var incident = new GlideRecord('incident');
        incident.orderBy('priority');
        incident.query();

        while(incident.next()){
            rawData.push({
                sys_created_on: incident.getDisplayValue('sys_created_on'),
                priority: incident.getDisplayValue('priority')
            });
        }

        var dataStr = JSON.stringify(rawData);
    &lt;/g:evaluate&gt;
    
    &lt;div class="container"&gt;
        &lt;div class="row"&gt;
            &lt;h1&gt;Header&lt;/h1&gt;
        &lt;/div&gt;
     	&lt;div class="row"&gt;
            &lt;canvas id="sample-chart" width="400" height="200"&gt;&lt;/canvas&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.7/js/materialize.min.js"&gt;&lt;/script&gt;    
    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"&gt;&lt;/script&gt;
    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.19.3/moment.min.js"&gt;&lt;/script&gt;
    &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"&gt;&lt;/script&gt;

    &lt;script&gt;
        (function($){
            var ctx = document.getElementById("sample-chart").getContext('2d');

            var data = $[dataStr];

            var groupedData = _.groupBy(data, function(rec){
                return rec.sys_created_on.split(" ")[0];
            }); 

            var secondDimension = _.uniq(_.map(data, function(obj){
                return obj.priority;
            }));

            var datasets = _.map(secondDimension, function(dimension){
                var counts = _.map(groupedData, function(obj, key){ 
                    return _.filter(obj, function(subObj){
                        return subObj.priority == dimension;
                    }).length;
                });

                return {
                    data: counts,
                    backgroundColor: getRandomColor(),
                    label: dimension,
                    fill: false
                }

            });

            var labels = _.map(groupedData, function(obj, key){ return key});
            var data = _.map(groupedData, function(obj, key){ return obj.length});

            new Chart(ctx, {
                type: 'bar',
                'data': {
                    'labels': _.map(groupedData, function(obj, key){ return key}),
                    'datasets': datasets
                },
                options: {
                   scales: {
                        xAxes: [{
                            stacked: true,
                        }],
                        yAxes: [{
                            stacked: true
                        }]
                    }
                }
            }); 

            function getRandomColor() {
              var letters = '0123456789ABCDEF';
              var color = '#';
              for (var i = 0; i != 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
              }
              return color;
            }

        })(jQuery)

    &lt;/script&gt;
	
&lt;/j:jelly&gt;]]&gt;&lt;/html&gt;&lt;name&gt;TrackCIPrice&lt;/name&gt;&lt;processing_script/&gt;&lt;sys_class_name&gt;sys_ui_page&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-08-31 07:35:29&lt;/sys_created_on&gt;&lt;sys_id&gt;3b8cb3032fa59110b2ab3f96f699b6cf&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;TrackCIPrice&lt;/sys_name&gt;&lt;sys_package display_value="ServiceNowTasks" source="x_847697_serviceno"&gt;b979020a2f9d1110b2ab3f96f699b655&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="ServiceNowTasks"&gt;b979020a2f9d1110b2ab3f96f699b655&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_page_3b8cb3032fa59110b2ab3f96f699b6cf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-08-31 07:35:29&lt;/sys_updated_on&gt;&lt;/sys_ui_page&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1798436693</payload_hash>
        <record_name>TrackCIPrice</record_name>
        <reverted_from/>
        <source>d7263fc72f659110b2ab3f96f699b6ed</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-08-31 07:35:29</sys_created_on>
        <sys_id>cbfc3b032fa59110b2ab3f96f699b6df</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>182f2d396d20000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-31 07:35:29</sys_updated_on>
        <type>UI Page</type>
        <update_guid>07fc3b031ba59110b4cbfe2e7c95c8df</update_guid>
        <update_guid_history>07fc3b031ba59110b4cbfe2e7c95c8df:-1798436693</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-01 08:20:47</sys_created_on>
        <sys_db_object display_value="" name="sys_ui_page">sys_ui_page</sys_db_object>
        <sys_id>d3bdc3be08c748c0b3c7753c8206a400</sys_id>
        <sys_metadata>3b8cb3032fa59110b2ab3f96f699b6cf</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>TrackCIPrice</sys_name>
        <sys_package display_value="ServiceNowTasks" source="x_847697_serviceno">b979020a2f9d1110b2ab3f96f699b655</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="ServiceNowTasks">b979020a2f9d1110b2ab3f96f699b655</sys_scope>
        <sys_scope_delete display_value="">c6f584af7b4b4086a7fdb8223c164a64</sys_scope_delete>
        <sys_update_name>sys_ui_page_3b8cb3032fa59110b2ab3f96f699b6cf</sys_update_name>
        <sys_update_version display_value="sys_ui_page_3b8cb3032fa59110b2ab3f96f699b6cf">cbfc3b032fa59110b2ab3f96f699b6df</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-09-01 08:20:47</sys_updated_on>
    </sys_metadata_delete>
</record_update>
